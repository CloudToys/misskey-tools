extends _base

block content
    .xd-card
        h1: a(href="/") みす廃あらーと
        h2 マイページ
        p おかえりなさい、@!{ user.username }@!{ user.host } さん。

        case from
            when "updateSettings"
                .xd-alert.my-2
                    i.icon.fas.fa-thumbs-up
                    strong 設定を変更しました。
            when "send"
                .xd-alert.my-2
                    i.icon.fas.fa-thumbs-up
                    strong テスト送信しました。
 
        if isGroundpolis
            .xd-alert.my-2
                i.icon.fas.fa-meteor
                strong Groundpolis アカウントでログインしています。専用機能が有効化されました。
    
    section#scores.xd-vstack
        .xd-hstack
            +serverInfo()
            .xd-card
                .header
                    h1.title みす廃データ
                .body
                    table
                        thead
                            tr
                                th 内容
                                th スコア
                                th 前日比
                        tbody
                            tr
                                td ノート
                                td !{score.notesCount}
                                td !{score.notesDelta}
                            tr
                                td フォロー
                                td !{score.followingCount}
                                td !{score.followingDelta}
                            tr
                                td フォロワー
                                td !{score.followersCount}
                                td !{score.followersDelta}
    
        section.xd-card#settings
                -
                    const visibilities = [
                        [ 'public', 'パブリック'],
                        [ 'home', isGroundpolis ? '未収載' : 'ホーム'],
                        [ 'followers', 'フォロワー'],
                    ];
                    if (isGroundpolis) visibilities.push(['users', 'ログインユーザー']);
                    const alertModes = [
                        [ 'note', '自動的にノートを投稿' ],
                        [ 'notification', 'Misskeyに通知(標準)' ],
                        [ 'nothing', '通知しない' ],
                    ];
                    const currentAlertModeLabel = alertModes.find(a => a[0] === user.alertMode)[1];
                .header
                    h1.title 設定
                .body
                    .xd-alert.danger.mb-2
                        i.icon.fas.fa-exclamation-circle
                        | スコア通知方法に「Misskey に通知」を選んでいる場合、Groundpolis v3 および Misskey v12 の最新版以外では動作しません。めいすきーや古いバージョンをお使いの方は、「自動的にノートを投稿」をお使いください。
                    form(method="post", action="/update-settings")
                        p: label スコア通知方法：
                            select#alertModeSelector(name="alertMode")
                                each set in alertModes
                                    option(value=set[0], selected=(user.alertMode === set[0]))= set[1]
                        #hideWhenAlertModeNotNote
                            p: label 公開範囲：
                                select(name="visibility")
                                    each set in visibilities
                                        option(value=set[0], selected=(user.visibility === set[0]))= set[1]
                            p 
                                | フラグ <br />
                                label
                                    input(type="radio", name="flag", value="none", checked=!user.localOnly && !user.remoteFollowersOnly)
                                    | なし(標準)<br />
                                label
                                    input(type="radio", name="flag", value="localOnly", checked=user.localOnly)
                                    | ローカルのみ<br />
                                if isGroundpolis
                                    label
                                        input(type="radio", name="flag", value="remoteFollowersOnly", checked=user.remoteFollowersOnly)
                                        | リモートフォロワーとローカル<br />
                        #hideWhenAlertModeNothing
                            div
                                label 投稿テンプレート<br/>
                                textarea#template(name="template", maxlength=280, placeholder=defaultTemplate)=user.template || defaultTemplate
                                details()
                                    summary ヘルプ
                                    ul
                                        li テンプレートに使える文字数は280文字です。
                                        li 空欄にすると、デフォルト値にリセットされます。
                                        li ハッシュタグ #misshaialert は、テンプレートに関わらず自動付与されます。
                                        li
                                            code {notesCount}
                                            | といった形式のテキストは変数として扱われ、これを含めると投稿時に自動的に値が埋め込まれます。
                                    
                                    p 変数の表を以下に示します。変数をクリックすると自動挿入されます。
                                    table
                                        thead: tr
                                            th 変数
                                            th 説明
                                        tbody
                                            each val, key in templateVariables
                                                tr
                                                    td(onclick=`insert('{${key}}')`, style="cursor: pointer")=key
                                                    td=val.description
                        button.primary(type="submit") 保存


        section.xd-card#settings
                .header
                    h1.title 操作
                .body
                    form.mb-2(action="/send", method="post"): button#send(style="display: inline-block") アラートをテスト送信
                    form.mb-2(action="/logout", method="post"): button#logout(style="display: inline-block") ログアウト
                    form.mb-2(action="/optout", method="post"): button.danger#optout(style="display: inline-block") アカウント連携を解除する

block script
    script.
        history.replaceState(null, null, '/');
        document.getElementById('send').addEventListener('click', (e) => {
            if (!confirm('現在の設定「!{currentAlertModeLabel}」に基づいてアラートを送信しますか？'))
                e.preventDefault();
        });
        document.getElementById('optout').addEventListener('click', (e) => {
            if (!confirm('連携を解除すると、統計情報などのデータが削除されてしまい、以後アラート機能をご利用いただけなくなります。この操作は変更できません。\n\nそれでもなお、連携を解除しますか？'))
                e.preventDefault();
        });
        document.getElementById('logout').addEventListener('click', (e) => {
            if (!confirm('ログアウトしますか？'))
                e.preventDefault();
        });
        const hideWhenAlertModeNotNote = document.getElementById('hideWhenAlertModeNotNote');
        const hideWhenAlertModeNothing = document.getElementById('hideWhenAlertModeNothing');
        const alertModeSelector = document.getElementById('alertModeSelector');
        const updateView = () => {
            const value = alertModeSelector.value;
            hideWhenAlertModeNotNote.style.display = value !== 'note' ? 'none' : 'block';
            hideWhenAlertModeNothing.style.display = value === 'nothing' ? 'none' : 'block';
        };
        alertModeSelector.addEventListener('change', updateView);
        updateView();
        
        const template = document.getElementById('template');
        function insert(text) {
            template.value += text;
        }
